/**
 * SendinBlue API
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@sendinblue.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DeleteHardbounces1', 'model/InlineResponse20010', 'model/InlineResponse20011', 'model/InlineResponse20012', 'model/InlineResponse20012Templates', 'model/InlineResponse2009', 'model/InlineResponse201', 'model/InlineResponse2012', 'model/InlineResponse2013', 'model/InlineResponse400', 'model/InlineResponse403', 'model/SendEmail1', 'model/SendSmtpEmail1', 'model/SendTestEmail1', 'model/SmtpTemplate', 'model/SmtpTemplate1'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DeleteHardbounces1'), require('../model/InlineResponse20010'), require('../model/InlineResponse20011'), require('../model/InlineResponse20012'), require('../model/InlineResponse20012Templates'), require('../model/InlineResponse2009'), require('../model/InlineResponse201'), require('../model/InlineResponse2012'), require('../model/InlineResponse2013'), require('../model/InlineResponse400'), require('../model/InlineResponse403'), require('../model/SendEmail1'), require('../model/SendSmtpEmail1'), require('../model/SendTestEmail1'), require('../model/SmtpTemplate'), require('../model/SmtpTemplate1'));
  } else {
    // Browser globals (root is window)
    if (!root.SendinBlueApi) {
      root.SendinBlueApi = {};
    }
    root.SendinBlueApi.SMTPApi = factory(root.SendinBlueApi.ApiClient, root.SendinBlueApi.DeleteHardbounces1, root.SendinBlueApi.InlineResponse20010, root.SendinBlueApi.InlineResponse20011, root.SendinBlueApi.InlineResponse20012, root.SendinBlueApi.InlineResponse20012Templates, root.SendinBlueApi.InlineResponse2009, root.SendinBlueApi.InlineResponse201, root.SendinBlueApi.InlineResponse2012, root.SendinBlueApi.InlineResponse2013, root.SendinBlueApi.InlineResponse400, root.SendinBlueApi.InlineResponse403, root.SendinBlueApi.SendEmail1, root.SendinBlueApi.SendSmtpEmail1, root.SendinBlueApi.SendTestEmail1, root.SendinBlueApi.SmtpTemplate, root.SendinBlueApi.SmtpTemplate1);
  }
}(this, function(ApiClient, DeleteHardbounces1, InlineResponse20010, InlineResponse20011, InlineResponse20012, InlineResponse20012Templates, InlineResponse2009, InlineResponse201, InlineResponse2012, InlineResponse2013, InlineResponse400, InlineResponse403, SendEmail1, SendSmtpEmail1, SendTestEmail1, SmtpTemplate, SmtpTemplate1) {
  'use strict';

  /**
   * SMTP service.
   * @module api/SMTPApi
   * @version 3.0.0
   */

  /**
   * Constructs a new SMTPApi. 
   * @alias module:api/SMTPApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createSmtpTemplate operation.
     * @callback module:api/SMTPApi~createSmtpTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an smtp template
     * @param {module:model/SmtpTemplate} smtpTemplate values to update in smtp template
     * @param {module:api/SMTPApi~createSmtpTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse201}
     */
    this.createSmtpTemplate = function(smtpTemplate, callback) {
      var postBody = smtpTemplate;

      // verify the required parameter 'smtpTemplate' is set
      if (smtpTemplate === undefined || smtpTemplate === null) {
        throw new Error("Missing the required parameter 'smtpTemplate' when calling createSmtpTemplate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse201;

      return this.apiClient.callApi(
        '/smtp/templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteHardbounces operation.
     * @callback module:api/SMTPApi~deleteHardbouncesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete hardbounces
     * Delete hardbounces. To use carefully (e.g. in case of temporary ISP failures)
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteHardbounces1} opts.deleteHardbounces values to delete hardbounces
     * @param {module:api/SMTPApi~deleteHardbouncesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteHardbounces = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['deleteHardbounces'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/smtp/deleteHardbounces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAggregatedSmtpReport operation.
     * @callback module:api/SMTPApi~getAggregatedSmtpReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20010} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get your SMTP activity aggregated over a period of time
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startDate Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate
     * @param {Date} opts.endDate Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate
     * @param {Number} opts.days Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39;
     * @param {String} opts.tag Tag of the emails
     * @param {module:api/SMTPApi~getAggregatedSmtpReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20010}
     */
    this.getAggregatedSmtpReport = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'days': opts['days'],
        'tag': opts['tag']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20010;

      return this.apiClient.callApi(
        '/smtp/statistics/aggregatedReport', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailEventReport operation.
     * @callback module:api/SMTPApi~getEmailEventReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20011} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all your SMTP activity (unaggregated events)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number limitation for the result returned (default to 50)
     * @param {Number} opts.offset Beginning point in the list to retrieve from. (default to 0)
     * @param {Date} opts.startDate Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate
     * @param {Date} opts.endDate Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate
     * @param {Number} opts.days Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39;
     * @param {String} opts.email Filter the report for a specific email addresses
     * @param {module:model/String} opts.event Filter the report for a specific event type
     * @param {String} opts.tags Filter the report for tags (serialized and urlencoded array)
     * @param {String} opts.messageId Filter on a specific message id
     * @param {String} opts.templateId Filter on a specific template id
     * @param {module:api/SMTPApi~getEmailEventReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20011}
     */
    this.getEmailEventReport = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'days': opts['days'],
        'email': opts['email'],
        'event': opts['event'],
        'tags': opts['tags'],
        'messageId': opts['messageId'],
        'templateId': opts['templateId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20011;

      return this.apiClient.callApi(
        '/smtp/statistics/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSmtpReport operation.
     * @callback module:api/SMTPApi~getSmtpReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2009} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get your SMTP activity aggregated per day
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of documents returned per page (default to 50)
     * @param {Number} opts.offset Index of the first document on the page (default to 0)
     * @param {Date} opts.startDate Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD)
     * @param {Date} opts.endDate Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD)
     * @param {Number} opts.days Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39;
     * @param {String} opts.tag Tag of the emails
     * @param {module:api/SMTPApi~getSmtpReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2009}
     */
    this.getSmtpReport = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'days': opts['days'],
        'tag': opts['tag']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2009;

      return this.apiClient.callApi(
        '/smtp/statistics/reports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSmtpTemplate operation.
     * @callback module:api/SMTPApi~getSmtpTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20012Templates} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the template informations
     * @param {String} templateId id of the template
     * @param {module:api/SMTPApi~getSmtpTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20012Templates}
     */
    this.getSmtpTemplate = function(templateId, callback) {
      var postBody = null;

      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling getSmtpTemplate");
      }


      var pathParams = {
        'templateId': templateId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20012Templates;

      return this.apiClient.callApi(
        '/smtp/templates/{templateId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSmtpTemplates operation.
     * @callback module:api/SMTPApi~getSmtpTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20012} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of SMTP templates
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.templateStatus Filter on the status of the template. Active &#x3D; true, inactive &#x3D; false (default to false)
     * @param {Number} opts.limit Number of documents returned per page (default to 50)
     * @param {Number} opts.offset Index of the first document in the page (default to 0)
     * @param {module:api/SMTPApi~getSmtpTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20012}
     */
    this.getSmtpTemplates = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'templateStatus': opts['templateStatus'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse20012;

      return this.apiClient.callApi(
        '/smtp/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sendTemplate operation.
     * @callback module:api/SMTPApi~sendTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2012} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a template
     * @param {String} templateId Id of the template
     * @param {module:model/SendEmail1} sendEmail 
     * @param {module:api/SMTPApi~sendTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2012}
     */
    this.sendTemplate = function(templateId, sendEmail, callback) {
      var postBody = sendEmail;

      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling sendTemplate");
      }

      // verify the required parameter 'sendEmail' is set
      if (sendEmail === undefined || sendEmail === null) {
        throw new Error("Missing the required parameter 'sendEmail' when calling sendTemplate");
      }


      var pathParams = {
        'templateId': templateId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2012;

      return this.apiClient.callApi(
        '/smtp/templates/{templateId}/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sendTestTemplate operation.
     * @callback module:api/SMTPApi~sendTestTemplateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a template to your test list
     * @param {String} templateId Id of the template
     * @param {module:model/SendTestEmail1} sendTestEmail 
     * @param {module:api/SMTPApi~sendTestTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.sendTestTemplate = function(templateId, sendTestEmail, callback) {
      var postBody = sendTestEmail;

      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling sendTestTemplate");
      }

      // verify the required parameter 'sendTestEmail' is set
      if (sendTestEmail === undefined || sendTestEmail === null) {
        throw new Error("Missing the required parameter 'sendTestEmail' when calling sendTestTemplate");
      }


      var pathParams = {
        'templateId': templateId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/smtp/templates/{templateId}/sendTest', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sendTransacEmail operation.
     * @callback module:api/SMTPApi~sendTransacEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2013} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a transactional email
     * @param {module:model/SendSmtpEmail1} sendSmtpEmail Values to send a transactional email
     * @param {module:api/SMTPApi~sendTransacEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2013}
     */
    this.sendTransacEmail = function(sendSmtpEmail, callback) {
      var postBody = sendSmtpEmail;

      // verify the required parameter 'sendSmtpEmail' is set
      if (sendSmtpEmail === undefined || sendSmtpEmail === null) {
        throw new Error("Missing the required parameter 'sendSmtpEmail' when calling sendTransacEmail");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2013;

      return this.apiClient.callApi(
        '/smtp/email', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSmtpTemplate operation.
     * @callback module:api/SMTPApi~updateSmtpTemplateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an smtp templates
     * @param {String} templateId id of the template
     * @param {module:model/SmtpTemplate1} smtpTemplate values to update in smtp template
     * @param {module:api/SMTPApi~updateSmtpTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateSmtpTemplate = function(templateId, smtpTemplate, callback) {
      var postBody = smtpTemplate;

      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling updateSmtpTemplate");
      }

      // verify the required parameter 'smtpTemplate' is set
      if (smtpTemplate === undefined || smtpTemplate === null) {
        throw new Error("Missing the required parameter 'smtpTemplate' when calling updateSmtpTemplate");
      }


      var pathParams = {
        'templateId': templateId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api-key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/smtp/templates/{templateId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
