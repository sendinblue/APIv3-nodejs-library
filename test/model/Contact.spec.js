/*
 * SendinBlue API
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@sendinblue.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.26
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SibApiV3Sdk);
  }
}(this, function(expect, SibApiV3Sdk) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Contact', function() {
      // beforeEach(function() {
      //   instance = new SibApiV3Sdk.Contact();
      // });

      // it('should create an instance of Contact', function() {
      //   // TODO: update the code to test Contact
      //   expect(instance).to.be.a(SibApiV3Sdk.Contact);
      // });

      // it('should have the property virtualNextTask (base name: "virtualNextTask")', function() {
      //   // TODO: update the code to test the property virtualNextTask
      //   expect(instance).to.have.property('virtualNextTask');
      //   // expect(instance.virtualNextTask).to.be(expectedValueLiteral);
      // });

      // it('should have the property email (base name: "email")', function() {
      //   // TODO: update the code to test the property email
      //   expect(instance).to.have.property('email');
      //   // expect(instance.email).to.be(expectedValueLiteral);
      // });

      // it('should have the property assignToId (base name: "assignToId")', function() {
      //   // TODO: update the code to test the property assignToId
      //   expect(instance).to.have.property('assignToId');
      //   // expect(instance.assignToId).to.be(expectedValueLiteral);
      // });

      // it('should have the property contactsId (base name: "contactsId")', function() {
      //   // TODO: update the code to test the property contactsId
      //   expect(instance).to.have.property('contactsId');
      //   // expect(instance.contactsId).to.be(expectedValueLiteral);
      // });

      // it('should have the property crmLists (base name: "crmLists")', function() {
      //   // TODO: update the code to test the property crmLists
      //   expect(instance).to.have.property('crmLists');
      //   // expect(instance.crmLists).to.be(expectedValueLiteral);
      // });

      // it('should have the property attributes (base name: "attributes")', function() {
      //   // TODO: update the code to test the property attributes
      //   expect(instance).to.have.property('attributes');
      //   // expect(instance.attributes).to.be(expectedValueLiteral);
      // });

      // it('should have the property createdAt (base name: "createdAt")', function() {
      //   // TODO: update the code to test the property createdAt
      //   expect(instance).to.have.property('createdAt');
      //   // expect(instance.createdAt).to.be(expectedValueLiteral);
      // });

      // it('should have the property updatedAt (base name: "updatedAt")', function() {
      //   // TODO: update the code to test the property updatedAt
      //   expect(instance).to.have.property('updatedAt');
      //   // expect(instance.updatedAt).to.be(expectedValueLiteral);
      // });

    });
  });

}));
